buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        maven { url 'http://clojars.org/repo' }
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'http://repo.spring.io/milestone' }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }

    }
    dependencies {
        // replace with the current version of the Android plugin
        classpath 'com.android.tools.build:gradle:1.3.1'
        // the latest version of the android-apt plugin
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
        classpath 'io.fabric.tools:gradle:1.+'

        classpath 'com.android.tools.build:gradle:1.3.1'
        classpath('fr.avianey.androidsvgdrawable:gradle-plugin:3.0.0') {
            // should be excluded to avoid conflict
            exclude group: 'xerces'
        }
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: "androidsvgdrawable"

def AAVersion = '3.3.2'


repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'http://clojars.org/repo' }
    maven { url 'https://maven.fabric.io/public' }
    maven { url 'http://repo.spring.io/milestone' }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
        applicationId "com.prototype.wishti"
        minSdkVersion 21
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }


    packagingOptions {
        exclude 'META-INF/license.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }

    sourceSets {
        main.res.srcDirs = [main.res.srcDirs, "build/generated/res/main"]
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.1.0'
    compile 'com.android.support:design:23.1.0'
    apt "org.androidannotations:androidannotations:$AAVersion"
    compile "org.androidannotations:androidannotations-api:$AAVersion"
    compile 'com.pusher:pusher-java-client:0.3.3'
    compile('com.digits.sdk.android:digits:1.9.3@aar') {
        transitive = true;
    }
    compile 'org.springframework.android:spring-android-rest-template:2.0.0.M1'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.4.2'
    compile 'com.jakewharton:disklrucache:2.0.2'

    compile 'net.danlew:android.joda:2.9.1'
    compile 'de.hdodenhof:circleimageview:2.0.0'




}

apt {
    arguments {
        resourcePackageName android.defaultConfig.applicationId
        androidManifestFile variant.outputs[0]?.processResources?.manifestFile

//        androidManifestFile variant.outputs[0].processResources.manifestFile
//        // if you have multiple outputs (when using splits), you may want to have other index than 0
//
//        // If you are using different applicationId than your manifest package name, add the manifest package name here
//        resourcePackageName "com.prototype.wishti"
//
//        // You can set optional annotation processing options here, like these commented options:
//        // logLevel 'INFO'
//        // logFile '/var/log/aa.log'
    }
}

task svgToDrawablePng(type: fr.avianey.androidsvgdrawable.gradle.SvgDrawableTask) {

    println 'svgToDrawablePng task started'

    // specify where to pick SVG from
    from = files('src/main/svg-png')
    // specify the android res folder
    to = file('build/generated/res/main')

    createMissingDirectories = true
    // override files only if necessary
    overwriteMode = 'ifModified'
    // let generate PNG for the following densities only
    // if none specified, all densities will be used
    targetedDensities = ['ldpi', 'hdpi', 'mdpi', 'xhdpi', 'xxhdpi', 'xxxhdpi']

    // output format of the generated resources
    outputFormat = 'PNG'
    // output type is drawable (default)
    outputType = 'drawable'

    println 'svgToDrawablePng task finished'

}
